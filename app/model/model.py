import tensorflow as tf
from tensorflow.keras.callbacks import LearningRateScheduler # type: ignore
from tensorflow.keras.preprocessing.image import ImageDataGenerator # type: ignore


def train_and_save_model():
    mnist = tf.keras.datasets.mnist
    (x_train, y_train), (x_test, y_test) = mnist.load_data()

    x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
    x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
    x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalizing to [0, 1]

    # Data augmentation
    datagen = ImageDataGenerator(
        rotation_range=10,  # Random rotations from 0 to 10 degrees
        zoom_range=0.1,  # Random zoom
        width_shift_range=0.1,  # Random shifts in width
        height_shift_range=0.1  # Random shifts in height
    )

    model = tf.keras.models.Sequential([
        tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.Dropout(0.25),
        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(10, activation='softmax')
    ])

    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

    # Learning rate scheduler
    def lr_schedule(epoch):
        lr = 1e-3
        if epoch > 10:
            lr *= 0.5e-3
        elif epoch > 20:
            lr *= 1e-4
        return lr

    callbacks = [
        LearningRateScheduler(lr_schedule)
    ]

    # Fit the model on the batches generated by datagen.flow()
    model.fit(datagen.flow(x_train, y_train, batch_size=32),
              epochs=25,  # Increased epochs
              validation_data=(x_test, y_test),
              callbacks=callbacks)

    model.save('handwritten.model.keras')
    loss, accuracy = model.evaluate(x_test, y_test)
    print(f"Test Accuracy: {accuracy}")

def load_model():
    return tf.keras.models.load_model('handwritten.model.keras')

if __name__ == "__main__":
    train_and_save_model()
